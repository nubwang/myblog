#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const cluster = require('cluster');  
const numCPUs = require('os').cpus().length; 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const server = http.createServer(app);

if (cluster.isMaster) {  
  console.log(`主进程 ${process.pid} 正在运行`);  
  
  // 衍生工作进程  
  for (let i = 0; i < numCPUs; i++) {  
    cluster.fork({ WORKER_NAME: `北京泛非万家商务有限公司_${i + 1}进程` });  
  }  
  
  // 监听工作进程退出事件  
  cluster.on('exit', (worker, code, signal) => {  
    console.log(`工作进程 ${worker.process.pid} 已退出`);  
    // 可以选择重新fork一个工作进程  
    const newWorker = cluster.fork({ WORKER_NAME: worker.process.env.WORKER_NAME });
    console.log(`Restarted worker ${newWorker.process.pid}`);
  });  
  
} else {  
  // 工作进程逻辑  
  const workerName = process.env.WORKER_NAME || `worker_${process.pid}`;
  process.title = workerName;
  server.listen(port);  
  server.on('error', onError);  
  server.on('listening', onListening);  
  
  console.log(`工作进程 ${process.pid} 已启动`);  
} 

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
